const express = require('express');
const app = express();
app.use(express.json());

// ‚úÖ Verify Token cho cxgenie.ai
const VERIFY_TOKEN = "6562e459-389d-4483-a317-6fcd6fb6e302";

// üìå X√°c minh Webhook API
app.get('/webhook', (req, res) => {
    const token = req.query["hub.verify_token"];
    const challenge = req.query["hub.challenge"];

    if (token === VERIFY_TOKEN) {
        console.log("‚úÖ X√°c minh Webhook th√†nh c√¥ng!");
        res.send(challenge);  // Tr·∫£ v·ªÅ challenge ƒë·ªÉ x√°c nh·∫≠n webhook
    } else {
        console.log("‚ùå X√°c minh th·∫•t b·∫°i!");
        res.sendStatus(403);  // Tr·∫£ v·ªÅ m√£ l·ªói 403 n·∫øu token kh√¥ng h·ª£p l·ªá
    }
});

// üìå API xem t·ª≠ vi
app.post('/xem-tuvi', (req, res) => {
    const { ngaySinh, thangSinh, namSinh, gioSinh, namXem } = req.body;

    if (!ngaySinh || !thangSinh || !namSinh || !gioSinh || !namXem) {
        return res.status(400).json({ message: "Thi·∫øu th√¥ng tin ng√†y gi·ªù sinh ho·∫∑c nƒÉm xem." });
    }

    // üéØ X·ª≠ l√Ω lu·∫≠n gi·∫£i t·ª≠ vi
    const thienCan = ["Gi√°p", "·∫§t", "B√≠nh", "ƒêinh", "M·∫≠u", "K·ª∑", "Canh", "T√¢n", "Nh√¢m", "Qu√Ω"];
    const diaChi = ["T√Ω", "S·ª≠u", "D·∫ßn", "M√£o", "Th√¨n", "T·ªµ", "Ng·ªç", "M√πi", "Th√¢n", "D·∫≠u", "Tu·∫•t", "H·ª£i"];
    
    let can = thienCan[namSinh % 10];  // T√≠nh Thi√™n Can
    let chi = diaChi[namSinh % 12];    // T√≠nh ƒê·ªãa Chi

    // T√≠nh Cung M·ªánh
    const cungMenh = ["D·∫ßn", "M√£o", "Th√¨n", "T·ªµ", "Ng·ªç", "M√πi", "Th√¢n", "D·∫≠u", "Tu·∫•t", "H·ª£i", "T√Ω", "S·ª≠u"];
    const cungMenh = cungMenh[(namSinh + thangSinh) % 12];

    // T√≠nh Cung Sao
    const cungSao = ["T√Ω", "S·ª≠u", "D·∫ßn", "M√£o", "Th√¨n", "T·ªµ", "Ng·ªç", "M√πi", "Th√¢n", "D·∫≠u", "Tu·∫•t", "H·ª£i"];
    const cungSaoIndex = Math.floor(gioSinh / 2); // Gi·∫£ s·ª≠ gi·ªù sinh t·ª´ 0-23, chia cho 2 ƒë·ªÉ c√≥ ch·ªâ s·ªë t∆∞∆°ng ·ª©ng
    const cungAnSao = cungSao[cungSaoIndex];

    // Ph√¢n t√≠ch v·∫≠n h·∫°n theo th√°ng
    const danhSachThang = ["Gi√™ng", "Hai", "Ba", "T∆∞", "NƒÉm", "S√°u", "B·∫£y", "T√°m", "Ch√≠n", "M∆∞·ªùi", "M∆∞·ªùi m·ªôt", "Ch·∫°p"];
    const ketQuaThang = {};
    for (let i = 0; i < danhSachThang.length; i++) {
        const chuKy = (namXem - namSinh + i) % 12;
        if ([0, 4, 8].includes(chuKy)) {
            ketQuaThang[danhSachThang[i]] = "Th√°ng thu·∫≠n l·ª£i, d·ªÖ g·∫∑t h√°i th√†nh c√¥ng, t√†i l·ªôc d·ªìi d√†o.";
        } else if ([1, 5, 9].includes(chuKy)) {
            ketQuaThang[danhSachThang[i]] = "C∆° h·ªôi l·ªõn nh∆∞ng c·∫ßn th·∫≠n tr·ªçng, tr√°nh b·ªã l·ª£i d·ª•ng.";
        } else if ([2, 6, 10].includes(chuKy)) {
            ketQuaThang[danhSachThang[i]] = "C√≥ s·ª± bi·∫øn ƒë·ªông m·∫°nh v·ªÅ t√†i ch√≠nh, c√¥ng vi·ªác, c·∫ßn chu·∫©n b·ªã k·ªπ l∆∞·ª°ng.";
        } else {
            ketQuaThang[danhSachThang[i]] = "N√™n gi·ªØ g√¨n s·ª©c kh·ªèe, ·ªïn ƒë·ªãnh tinh th·∫ßn, tr√°nh quy·∫øt ƒë·ªãnh v·ªôi v√†ng.";
        }
    }

    // Ph√¢n t√≠ch v·∫≠n h·∫°n chi ti·∫øt
    const chiTietVanHan = {
        "S·ª©c Kh·ªèe": "C·∫ßn ch√∫ tr·ªçng ƒë·∫øn th·ªÉ tr·∫°ng, tr√°nh l√†m vi·ªác qu√° s·ª©c v√† duy tr√¨ ch·∫ø ƒë·ªô dinh d∆∞·ª°ng h·ª£p l√Ω.",
        "Ti·ªÅn T√†i": "C√≥ c∆° h·ªôi gia tƒÉng thu nh·∫≠p, nh∆∞ng c·∫ßn qu·∫£n l√Ω t√†i ch√≠nh h·ª£p l√Ω ƒë·ªÉ tr√°nh hao h·ª•t.",
        "C√¥ng Vi·ªác": "Th·ªùi ƒëi·ªÉm thu·∫≠n l·ª£i ƒë·ªÉ ph√°t tri·ªÉn s·ª± nghi·ªáp, nh∆∞ng c≈©ng c·∫ßn ƒë·ªÅ ph√≤ng b·ªã ch√®n √©p ho·∫∑c c·∫°nh tranh kh√¥ng l√†nh m·∫°nh.",
        "H√¥n Nh√¢n": "T√¨nh c·∫£m ·ªïn ƒë·ªãnh, nh∆∞ng c·∫ßn tr√°nh nh·ªØng hi·ªÉu l·∫ßm kh√¥ng ƒë√°ng c√≥, n√™n d√†nh nhi·ªÅu th·ªùi gian h∆°n cho ƒë·ªëi ph∆∞∆°ng.",
        "Gia ƒê√¨nh": "Quan h·ªá v·ªõi b·ªë m·∫π, anh ch·ªã em c√≥ s·ª± g·∫Øn k·∫øt, nh∆∞ng ƒë√¥i khi d·ªÖ x·∫£y ra xung ƒë·ªôt nh·ªè do kh√°c bi·ªát quan ƒëi·ªÉm."
    };

    // K·∫øt qu·∫£ cu·ªëi c√πng
    const ketQua = {
        message: "Lu·∫≠n gi·∫£i v·∫≠n h·∫°n",
        tongQuan: {
            namSinh: `${can} ${chi}`,  // Thi√™n Can + ƒê·ªãa Chi c·ªßa nƒÉm sinh
            nguHanh: "Ki·∫øm Phong Kim",
            tinhCach: "Ki√™n ƒë·ªãnh, m·∫°nh m·∫Ω nh∆∞ng ƒë√¥i khi qu√° c·ª©ng nh·∫Øc."
        },
        saoChieuMenh: {
            sao: "Th√°i √Çm",
            danhGia: "T·ªët cho c√¥ng danh, nh∆∞ng c·∫ßn ƒë·ªÅ ph√≤ng v·ªÅ s·ª©c kh·ªèe."
        },
        hanNam: {
            han: "Di√™m V∆∞∆°ng",
            moTa: "C·∫©n th·∫≠n v·ªÅ s·ª©c kh·ªèe, t√†i ch√≠nh c√≥ th·ªÉ b·ªã hao h·ª•t b·∫•t ng·ªù."
        },
        vanNien: {
            ten: "X√† H√£m T·ªânh",
            moTa: "D·ªÖ g·∫∑p kh√≥ khƒÉn, nh∆∞ng n·∫øu ki√™n tr√¨ s·∫Ω v∆∞·ª£t qua."
        },
        duBao: ketQuaThang,
        chiTietVanHan: chiTietVanHan
    };

    res.json(ketQua);
});

// ‚úÖ Kh·ªüi ƒë·ªông server
const PORT = process.env.PORT || 10000;
app.listen(PORT, () => console.log(`üöÄ Server ch·∫°y tr√™n c·ªïng ${PORT}`));
